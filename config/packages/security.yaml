security:
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    encoders: 
        App\Entity\Utilisateur:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # users_in_memory: { memory: null }
        app_user_provider: 
            entity:
                class: App\Entity\Utilisateur
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        refresh:
            pattern: ^/apiee/token/refresh
            stateless: true
            anonymous: true    
        
        login:
            pattern: ^/apiee/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /apiee/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/apiee
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        main:
            anonymous: lazy
            provider: app_user_provider
            
            form_login: 
                login_path: app_login
                check_path: app_login
                csrf_token_generator: security.csrf.token_manager

            logout:
                path: app_logout
                target: index
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/registration, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: '^/admin/utilisateurs', roles: ROLE_SUPER_ADMIN }
        # require ROLE_ADMIN for /admin*
        - { path: ^/apiee/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/apiee/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/apiee, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/apiee/(frais|clients|trajets)/\d+$, roles: ["ROLE_USER", "ROLE_ADMIN", "ROLE_SUPER_ADMIN"] }
       
        # - { path: ^/profile, roles: ROLE_USER }
